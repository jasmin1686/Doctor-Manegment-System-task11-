// <auto-generated />
using System;
using Doctor_Manegment_System_task11_.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Doctor_Manegment_System_task11_.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926225239_SeedDoctorsAndPatients")]
    partial class SeedDoctorsAndPatients
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descraption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descraption = "Specialist in Cardiology with 10 years of experience.",
                            Email = "ahmed.hassan@example.com",
                            ImageUrl = "doctor1.jpg",
                            Name = "DrAhmedHassan",
                            Specialization = "Cardiology",
                            phone = "01012345678"
                        },
                        new
                        {
                            Id = 2,
                            Descraption = "Dermatologist focusing on skin and hair treatments.",
                            Email = "gamal.mahmoud@example.com",
                            ImageUrl = "doctor2.jpg",
                            Name = "DrGamalMahmoud",
                            Specialization = "Dermatology",
                            phone = "01098765432"
                        },
                        new
                        {
                            Id = 3,
                            Descraption = "Orthopedic surgeon specialized in sports injuries.",
                            Email = "mohamed.ali@example.com",
                            ImageUrl = "doctor3.jpg",
                            Name = "DrMohamedAli",
                            Specialization = "Orthopedics",
                            phone = "01122334455"
                        },
                        new
                        {
                            Id = 4,
                            Descraption = "Pediatrician with expertise in child nutrition and growth.",
                            Email = "nour.eldin@example.com",
                            ImageUrl = "doctor4.jpg",
                            Name = "DrNourEldin",
                            Specialization = "Pediatrics",
                            phone = "01234567890"
                        },
                        new
                        {
                            Id = 5,
                            Descraption = "Psychiatrist specialized in cognitive behavioral therapy.",
                            Email = "huda.khaled@example.com",
                            ImageUrl = "doctor5.jpg",
                            Name = "DrKhaledNour",
                            Specialization = "Psychiatry",
                            phone = "01555667788"
                        },
                        new
                        {
                            Id = 6,
                            Descraption = "Dentist focusing on cosmetic and restorative dentistry.",
                            Email = "karim.mostafa@example.com",
                            ImageUrl = "doctor6.jpg",
                            Name = "DrKarimMostafa",
                            Specialization = "Dentistry",
                            phone = "01044455566"
                        });
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1995, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            Email = "omar.youssef@example.com",
                            Name = "OmarYoussef",
                            phone = "01011112222"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            Email = "mona.ali@example.com",
                            Name = "MonaAli",
                            phone = "01033334444"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1987, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            Email = "khaled.mostafa@example.com",
                            Name = "KhaledMostafa",
                            phone = "01155556666"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(2000, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            Email = "layla.ibrahim@example.com",
                            Name = "LaylaIbrahim",
                            phone = "01277778888"
                        },
                        new
                        {
                            Id = 11,
                            BirthDate = new DateTime(1982, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            Email = "hassan.fathy@example.com",
                            Name = "HassanFathy",
                            phone = "01599990000"
                        },
                        new
                        {
                            Id = 12,
                            BirthDate = new DateTime(1998, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            Email = "salma.adel@example.com",
                            Name = "SalmaAdel",
                            phone = "01012121212"
                        });
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Appointment", b =>
                {
                    b.HasOne("Doctor_Manegment_System_task11_.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctor_Manegment_System_task11_.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Patient", b =>
                {
                    b.HasOne("Doctor_Manegment_System_task11_.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Doctor_Manegment_System_task11_.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
